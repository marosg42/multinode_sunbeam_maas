#cloud-config
ssh_pwauth: True
ssh_authorized_keys:
  - ${ssh_public_key}
chpasswd:
  list: |
    ubuntu:linux
  expire: False

hostname: ${maas_hostname}
create_hostname_file: true
locale: C.UTF-8
package_update: true
package_upgrade: true
packages:
  - openssh-server
  - snapd
  - jq
  - git
  - python3-pip
  - python3-venv
  - moreutils
write_files:
  - content: |
      #!/bin/bash
      set -x
      sudo snap install maas --channel 3.6/stable
      sudo snap install maas-test-db --channel 3.6/stable

      sudo -E maas init region+rack --database-uri maas-test-db:/// --maas-url http://${address}:5240/MAAS
      sleep 25
      sudo maas createadmin --username admin --password admin --email admin
      sudo maas apikey --username admin > /home/ubuntu/api.key
      profile="admin"
      maas login $profile http://${address}:5240/MAAS $(cat /home/ubuntu/api.key)
      # # Configure MAAS DNS forwarding to OpenStack network DNS server
      # maas $profile maas set-config name=upstream_dns value="${dns_server}"
      # # TODO: Find how to properly configure DNSSEC
      # maas $profile maas set-config name=dnssec_validation value=no
      # # Download noble image
      # # maas $profile boot-source-selections create 1 os="ubuntu" release=noble arches=amd64 subarches="*" labels="*"
      # # To make 'openstack console log show' work
      # maas $profile maas set-config name=kernel_opts value="console=ttyS0 console=tty0"
      # # Skip setup screen
      # maas admin maas set-config name=completed_intro value=true

      # PRIMARY_RACK=$(maas $profile rack-controllers read | jq -r ".[] | .system_id")

      # networks=(${networks})
      # for network in "$${networks[@]}" ; do
      #   SUBNET=$${network#*:}
      #   SPACE=$${network%%:*}
      #   space=space-$SPACE
      #   FABRIC_ID=$(maas admin subnet read "$SUBNET" | jq -r ".vlan.fabric_id")
      #   VLAN_TAG=$(maas admin subnet read "$SUBNET" | jq -r ".vlan.vid")
      #   maas $profile spaces create name=$space
      #   maas $profile fabric update $FABRIC_ID name=fabric-$SPACE
      #   if [ "$SPACE" != "pxe-boot" ]; then
      #     maas $profile vlan update $FABRIC_ID $VLAN_TAG space=$space primary_rack="$PRIMARY_RACK"
      #     continue
      #   fi
      #   DHCP_START=$(python3 -c "import ipaddress as ip;print(list(ip.ip_network('$SUBNET').hosts())[-10])")
      #   DHCP_END=$(python3 -c "import ipaddress as ip;print(list(ip.ip_network('$SUBNET').hosts())[-1])")
      #   maas $profile ipranges create type=dynamic start_ip="$DHCP_START" end_ip="$DHCP_END"
      #   maas $profile vlan update $FABRIC_ID $VLAN_TAG space=$space dhcp_on=True primary_rack="$PRIMARY_RACK"
      # done
      # MG maas $profile boot-source-selections create 1 os=ubuntu release=jammy 'subarches=*' 'labels=*' arches=amd64
      # Wait for boot os to be downloaded
      while [ "x$(maas $profile boot-resources is-importing | cat)" != "xfalse" ];
      do
        echo "$(date) - waiting for boot resources to import"
        sleep 15
      done
      # MG  maas $profile  maas set-config name=commissioning_distro_series value=jammy
      # # Temporary workaround to get MAAS DHCP service started
      # sudo snap restart maas
      touch /tmp/.i_am_done
    path: /usr/local/share/init.sh
    owner: root:root
    permissions: "0555"
runcmd:
  - sudo -i -u ubuntu /usr/local/share/init.sh
